diff --git a/devel/gcc/patches/998-copy-class.patch b/devel/gcc/patches/998-copy-class.patch
new file mode 100644
index 000000000..8f88aa08c
--- /dev/null
+++ b/devel/gcc/patches/998-copy-class.patch
@@ -0,0 +1,44 @@
+diff --git a/libitm/beginend.cc b/libitm/beginend.cc
+index c3ed11b..fd6f835 100644
+--- a/libitm/beginend.cc
++++ b/libitm/beginend.cc
+@@ -406,7 +406,7 @@ GTM::gtm_transaction_cp::save(gtm_thread* tx)
+   // Save everything that we might have to restore on restarts or aborts.
+   jb = tx->jb;
+   undolog_size = tx->undolog.size();
+-  memcpy(&alloc_actions, &tx->alloc_actions, sizeof(alloc_actions));
++  memcpy((void *)&alloc_actions, &tx->alloc_actions, sizeof(alloc_actions));
+   user_actions_size = tx->user_actions.size();
+   id = tx->id;
+   prop = tx->prop;
+@@ -424,7 +424,7 @@ GTM::gtm_transaction_cp::commit(gtm_thread* tx)
+   // commits of nested transactions. Allocation actions must be committed
+   // before committing the snapshot.
+   tx->jb = jb;
+-  memcpy(&tx->alloc_actions, &alloc_actions, sizeof(alloc_actions));
++  memcpy((void *)&tx->alloc_actions, &alloc_actions, sizeof(alloc_actions));
+   tx->id = id;
+   tx->prop = prop;
+ }
+@@ -460,7 +460,7 @@ GTM::gtm_thread::rollback (gtm_transaction_cp *cp, bool aborting)
+       prop = cp->prop;
+       if (cp->disp != abi_disp())
+ 	set_abi_disp(cp->disp);
+-      memcpy(&alloc_actions, &cp->alloc_actions, sizeof(alloc_actions));
++      memcpy((void *)&alloc_actions, &cp->alloc_actions, sizeof(alloc_actions));
+       nesting = cp->nesting;
+     }
+   else
+diff --git a/libitm/method-ml.cc b/libitm/method-ml.cc
+index 37cb08b..ef8f668 100644
+--- a/libitm/method-ml.cc
++++ b/libitm/method-ml.cc
+@@ -110,7 +110,7 @@ struct ml_mg : public method_group
+     // This store is only executed while holding the serial lock, so relaxed
+     // memory order is sufficient here.  Same holds for the memset.
+     time.store(0, memory_order_relaxed);
+-    memset(orecs, 0, sizeof(atomic<gtm_word>) * L2O_ORECS);
++    memset((void *)orecs, 0, sizeof(atomic<gtm_word>) * L2O_ORECS);
+   }
+ };
+ 
diff --git a/devel/gcc/patches/999-ucontext_t.patch b/devel/gcc/patches/999-ucontext_t.patch
new file mode 100644
index 000000000..3907cd6d5
--- /dev/null
+++ b/devel/gcc/patches/999-ucontext_t.patch
@@ -0,0 +1,22 @@
+diff --git a/libgcc/config/i386/linux-unwind.h b/libgcc/config/i386/linux-unwind.h
+index e54bf73..d35fc45 100644
+--- a/libgcc/config/i386/linux-unwind.h
++++ b/libgcc/config/i386/linux-unwind.h
+@@ -58,7 +58,7 @@ x86_64_fallback_frame_state (struct _Unwind_Context *context,
+   if (*(unsigned char *)(pc+0) == 0x48
+       && *(unsigned long long *)(pc+1) == RT_SIGRETURN_SYSCALL)
+     {
+-      struct ucontext *uc_ = context->cfa;
++      ucontext_t *uc_ = context->cfa;
+       /* The void * cast is necessary to avoid an aliasing warning.
+          The aliasing warning is correct, but should not be a problem
+          because it does not alias anything.  */
+@@ -138,7 +138,7 @@ x86_fallback_frame_state (struct _Unwind_Context *context,
+ 	siginfo_t *pinfo;
+ 	void *puc;
+ 	siginfo_t info;
+-	struct ucontext uc;
++	ucontext_t uc;
+       } *rt_ = context->cfa;
+       /* The void * cast is necessary to avoid an aliasing warning.
+          The aliasing warning is correct, but should not be a problem
diff --git a/libs/tcp_wrappers/Makefile b/libs/tcp_wrappers/Makefile
index ca9bfd266..2cf6b22b3 100644
--- a/libs/tcp_wrappers/Makefile
+++ b/libs/tcp_wrappers/Makefile
@@ -33,7 +33,7 @@ endef
 TARGET_CFLAGS += $(FPIC)
 
 ifeq ($(CONFIG_USE_MUSL),)
-TARGET_EXTRA_LIBS:=LIBS=-lnsl
+TARGET_EXTRA_LIBS:=LIBS=
 endif
 
 define Build/Compile	
